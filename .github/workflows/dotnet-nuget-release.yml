name: .NET nuget release

on:
  workflow_call:
    inputs:
      Project_Path:
        required: true
        type: string
      Enable_Release:
        required: false
        type: string
      Enable_Nuget_Release:
        required: false
        type: string
    secrets:
      PACKAGE_TOKEN:
        required: true
      NUGET_PACKAGE_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.x
          #global-json-file: global.json

      # Build
      - name: Ensure GitHub NuGet Source
        run: |
          dotnet nuget add source 'https://nuget.pkg.github.com/baoduy2412/index.json' \
          -n github -u baoduy2412 -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.Project_Path }}
      - name: Build
        run: dotnet build ${{ inputs.Project_Path }} --no-restore --configuration Release
      - name: Test
        continue-on-error: true
        if: ${{ inputs.Enable_Release != 'true' }}
        run: dotnet test ${{ inputs.Project_Path }} --collect "Code Coverage" --verbosity normal

      # Versioning
      - uses: rmeneely/git-next-version@v1
        with:
          tag_pattern: 'v[0-9]*.[0-9]*.[0-9]*'
          increment: 'patch'
          auto_increment: 'true'
          remove_prefix: 'true'

      - name: Print the version
        run: echo ${{ env.NEXT_VERSION }}

      # Ensure the project able to Package
      - name: Package
        run: dotnet pack ${{ inputs.Project_Path }} --no-build --no-restore --configuration Release --output ${{ runner.WORKSPACE }}/nupkgs -p:PackageVersion=${{ steps.bump-semver.outputs.new_version }}
      - name: List Package
        run: ls ${{ runner.WORKSPACE }}/nupkgs

      - name: Zip Release
        if: ${{ inputs.Enable_Release == 'true' }}
        uses: TheDoctor0/zip-release@0.6.2
        with:
          # Filename for archive
          filename: release.zip
          directory: ${{ runner.WORKSPACE }}/nupkgs

      # Push nuget packages to Github Repository
      - name: Publish
        if: ${{ inputs.Enable_Release == 'true' }}
        continue-on-error: true
        run: dotnet nuget push ${{ runner.WORKSPACE }}/nupkgs/*.nupkg --skip-duplicate --source github --api-key ${{ secrets.PACKAGE_TOKEN }}

      # Create Release
      - name: Create Release
        id: create_release
        if: ${{ inputs.Enable_Release == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        with:
          tag_name: ${{ steps.bump-semver.outputs.new_version }}
          release_name: Release ${{ steps.bump-semver.outputs.new_version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        if: ${{ inputs.Enable_Release == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ runner.WORKSPACE }}/nupkgs/release.zip
          asset_name: release.zip
          asset_content_type: application/zip

      # Publish to NUGET.ORG
      - name: Publish Nuget
        if: ${{ inputs.Enable_Nuget_Release == 'true' }}
        continue-on-error: true
        run: dotnet nuget push ${{ runner.WORKSPACE }}/nupkgs/*.nupkg --skip-duplicate --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}
